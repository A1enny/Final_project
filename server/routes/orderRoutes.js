const express = require("express");
const db = require("../config/db.js");

module.exports = (io) => {
    const router = express.Router();

    // üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    const validateOrder = (req) => {
        const { table_id, session_id, menu_id, quantity, total_price } = req.body;
        if (!table_id || !session_id || !menu_id || !quantity || !total_price) {
            return "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô";
        }
        if (quantity <= 0 || total_price <= 0) {
            return "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0";
        }
        return null;
    };

    // üîπ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
    router.post("/", async (req, res) => {
        const validationError = validateOrder(req);
        if (validationError) {
            return res.status(400).json({ message: validationError });
        }

        const { table_id, session_id, menu_id, quantity, total_price } = req.body;

        let connection;
        try {
            connection = await db.getConnection();
            await connection.beginTransaction();

            // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `session_id` ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const [table] = await connection.query(
                "SELECT session_id FROM maw_db_tables WHERE table_id = ?",
                [table_id]
            );
            if (!table.length || table[0].session_id !== session_id) {
                return res.status(400).json({ message: "QR Code ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠ ‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß" });
            }

            // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `menu_id` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            const [menu] = await connection.query(
                "SELECT menu_name FROM maw_db_menus WHERE menu_id = ?",
                [menu_id]
            );
            if (!menu.length) {
                return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å" });
            }

            // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            const [result] = await connection.query(
                "INSERT INTO maw_db_orders (table_id, menu_id, quantity, total_price, status, payment_status, session_id) VALUES (?, ?, ?, ?, 'pending', 'unpaid', ?)",
                [table_id, menu_id, quantity, total_price, session_id]
            );

            const newOrder = {
                order_id: result.insertId,
                table_id,
                menu_id,
                menu_name: menu[0].menu_name,
                quantity,
                total_price,
                status: "pending",
                payment_status: "unpaid",
            };

            await connection.commit();

            // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Admin ‡πÅ‡∏•‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô Socket.io
            io.emit("update_orders", newOrder);
            io.to(`table_${table_id}`).emit("new_order", newOrder);

            res.status(201).json({ message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", order: newOrder });
        } catch (error) {
            if (connection) await connection.rollback();
            console.error("‚ùå Error placing order:", error);
            res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
        } finally {
            if (connection) connection.release();
        }
    });

    // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (Admin / ‡∏Ñ‡∏£‡∏±‡∏ß)
    router.put("/updateStatus/:order_id", async (req, res) => {
        const { order_id } = req.params;
        const { status } = req.body;
        const validStatuses = ["pending", "preparing", "served", "completed"];

        if (!validStatuses.includes(status)) {
            return res.status(400).json({ message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        let connection;
        try {
            connection = await db.getConnection();
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
            const [order] = await connection.query(
                "SELECT table_id FROM maw_db_orders WHERE order_id = ?",
                [order_id]
            );
            if (!order.length) {
                return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå" });
            }

            await connection.query(
                "UPDATE maw_db_orders SET status = ? WHERE order_id = ?",
                [status, order_id]
            );

            // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            io.to(`table_${order[0].table_id}`).emit("order_updated", { order_id, status });

            res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
        } catch (error) {
            console.error("‚ùå Error updating order status:", error);
            res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
        } finally {
            if (connection) connection.release();
        }
    });

    // üîπ ‡∏õ‡∏¥‡∏î‡πÇ‡∏ï‡πä‡∏∞ (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô)
    router.post("/closeTable", async (req, res) => {
        const { table_id } = req.body;

        let connection;
        try {
            connection = await db.getConnection();
            await connection.beginTransaction();

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const [pendingOrders] = await connection.query(
                "SELECT COUNT(*) AS count FROM maw_db_orders WHERE table_id = ? AND status IN ('pending', 'preparing')",
                [table_id]
            );

            if (pendingOrders[0].count > 0) {
                return res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏î‡πâ ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà" });
            }

            await connection.query(
                "UPDATE maw_db_tables SET session_id = NULL, status = 'available' WHERE table_id = ?",
                [table_id]
            );

            await connection.query(
                "UPDATE maw_db_orders SET status = 'completed' WHERE table_id = ?",
                [table_id]
            );

            await connection.commit();

            // üî• ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î
            io.to(`table_${table_id}`).emit("table_closed", { table_id });

            res.json({ success: true, message: "‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß" });
        } catch (error) {
            if (connection) await connection.rollback();
            console.error("‚ùå Error closing table:", error);
            res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÇ‡∏ï‡πä‡∏∞" });
        } finally {
            if (connection) connection.release();
        }
    });

    return router;
};
