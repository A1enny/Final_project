const express = require("express");
const router = express.Router();
const db = require("../config/db.js");

module.exports = (io) => {

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  router.get("/", async (req, res) => {
    try {
      const { table_id } = req.query;
      let query = `
            SELECT 
                r.recipe_name AS itemName,
                SUM(o.quantity) AS quantity,  -- ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
                SUM(o.total_price) AS price   -- ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
            FROM orders o
            JOIN menus m ON o.menu_id = m.menu_id
            JOIN recipes r ON m.recipe_id = r.recipe_id
            WHERE o.table_id = ?
            GROUP BY r.recipe_name  -- ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π
        `;

      const [orders] = await db.query(query, [table_id]);
      res.json(orders);
    } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
  });

  // ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  router.post("/", async (req, res) => {
    const { table_id, session_id, menu_id, menu_name, quantity, price } =
      req.body;
    const orderQuantity = quantity || 1;
    const totalPrice = price * orderQuantity;

    try {
      await db.query(
        "INSERT INTO orders (table_id, menu_id, quantity, status, total_price, payment_status, session_id) VALUES (?, ?, ?, 'pending', ?, 'unpaid', ?)",
        [table_id, menu_id, orderQuantity, totalPrice, session_id]
      );

      // üì° ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô WebSocket
      io.emit("new_order", { table_id, menu_id, quantity: orderQuantity });

      res.status(201).json({ success: true, message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      console.error("‚ùå Error placing order:", error);
      res
        .status(500)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
    }
  });

  // ‚úÖ ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (Bulk Order)
  router.post("/bulk", async (req, res) => {
    const { table_id, session_id, orders } = req.body;

    if (!orders || orders.length === 0) {
      return res
        .status(400)
        .json({ success: false, message: "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤" });
    }

    if (!orders || orders.length === 0) {
      return res.status(400).json({
        success: false,
        message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
      });
    }

    let connection;
    try {
      // ‚úÖ ‡πÉ‡∏ä‡πâ getConnection() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ Transaction
      connection = await db.getConnection();
      await connection.beginTransaction();

      for (const order of orders) {
        const { menu_id, quantity, price } = order;

        // 1Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        await connection.query(
          "INSERT INTO orders (table_id, menu_id, quantity, status, total_price, payment_status, session_id) VALUES (?, ?, ?, 'pending', ?, 'unpaid', ?)",
          [table_id, menu_id, quantity, price * quantity, session_id]
        );

        // 2Ô∏è‚É£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ
        const [ingredients] = await connection.query(
          "SELECT ingredient_id, amount FROM recipe_ingredients WHERE recipe_id = ?",
          [menu_id]
        );

        // 3Ô∏è‚É£ ‡∏´‡∏±‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏±‡∏á
        for (const ingredient of ingredients) {
          await connection.query(
            "UPDATE ingredients SET quantity = GREATEST(quantity - ?, 0) WHERE ingredient_id = ?",
            [ingredient.amount * quantity, ingredient.ingredient_id]
          );
        }
      }

      // ‚úÖ Commit Transaction
      await connection.commit();

      // üì° ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô WebSocket
      io.emit("new_order", { table_id, session_id, orders });

      res.status(201).json({ success: true, message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      if (connection) await connection.rollback();
      console.error("‚ùå Error processing bulk order:", error);
      res
        .status(500)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
    } finally {
      if (connection) connection.release(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    }
  });

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå (Server-Sent Events - SSE)

  router.get("/", (req, res) => {
    res.send("Orders API is working!");
  });

  router.post("/", (req, res) => {
    const { table_id, session_id, menu_id, quantity, price } = req.body;
    const orderQuantity = quantity || 1;
    const totalPrice = price * orderQuantity;

    const sql =
      "INSERT INTO orders (table_id, menu_id, quantity, total_price, status, payment_status, session_id) VALUES (?, ?, ?, ?, 'pending', 'unpaid', ?)";

    db.query(
      sql,
      [table_id, menu_id, orderQuantity, totalPrice, session_id],
      (err, result) => {
        if (err) {
          console.error("‚ùå Error placing order:", err);
          return res
            .status(500)
            .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£" });
        }

        // üì° ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô WebSocket
        io.emit("new_order", { table_id, session_id });

        res.status(201).json({ success: true, message: "‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
      }
    );
  });
  
  // ‚úÖ Server-Sent Events (SSE) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå

  router.get("/updates", (req, res) => {
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");

    const sendUpdate = async () => {
      try {
        const [orders] = await db.query(
          "SELECT * FROM orders WHERE status IN ('pending', 'preparing')"
        );
        res.write(`data: ${JSON.stringify(orders)}\n\n`);
      } catch (error) {
        console.error("‚ùå Error fetching order updates:", error);
      }
    };

    const interval = setInterval(sendUpdate, 5000);
    req.on("close", () => clearInterval(interval));
  });


  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  router.get("/", async (req, res) => {
    try {
      const { table_id } = req.query;
      let query = `
        SELECT 
          o.order_id, 
          o.table_id, 
          o.quantity, 
          o.total_price, 
          o.status, 
          r.recipe_name  -- ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å menu_name ‡πÄ‡∏õ‡πá‡∏ô recipe_name
        FROM orders o
        JOIN menus m ON o.menu_id = m.menu_id
        JOIN recipes r ON m.recipe_id = r.recipe_id  -- ‚úÖ JOIN recipes
      `;

      const params = [];
      if (table_id) {
        query += " WHERE o.table_id = ?";
        params.push(table_id);
      }

      const [orders] = await db.query(query, params);
      res.json(orders);
    } catch (error) {
      console.error("‚ùå Error fetching orders:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå" });
    }
  });

  router.put("/update-status/:tableId", async (req, res) => {
    const { tableId } = req.params;

    try {
      await db.query(
        "UPDATE orders SET status = 'paid' WHERE table_id = ? AND status = 'pending'",
        [tableId]
      );
      res.json({ success: true, message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô paid ‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
      res
        .status(500)
        .json({ success: false, message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error });
    }
  });

  router.put("/confirm-payment", async (req, res) => {
    const { table_id } = req.body;

    if (!table_id) {
        return res.status(400).json({ success: false, message: "‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ table_id" });
    }

    let connection;
    try {
        connection = await db.getConnection();
        await connection.beginTransaction();

        // ‚úÖ 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ
        const [orders] = await connection.query(
            `SELECT o.menu_id, o.quantity, o.total_price 
             FROM orders o 
             WHERE o.table_id = ? AND o.payment_status = 'unpaid'`,
            [table_id]
        );

        if (orders.length === 0) {
            throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô");
        }

        // ‚úÖ 2. ‡∏´‡∏±‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏£‡∏±‡∏°" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
        for (const order of orders) {
            const [ingredientResults] = await connection.query(
                `SELECT ri.ingredient_id, ri.amount, i.quantity AS current_quantity
                 FROM recipe_ingredients ri
                 JOIN menus m ON ri.recipe_id = m.recipe_id
                 JOIN ingredients i ON ri.ingredient_id = i.ingredient_id
                 WHERE m.menu_id = ?`,
                [order.menu_id]
            );

            if (!ingredientResults || ingredientResults.length === 0) {
                console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π ${order.menu_id}`);
                continue;
            }

            for (const ingredient of ingredientResults) {
                let currentQuantity = parseFloat(ingredient.current_quantity); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡πÜ ‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢ "‡∏Å‡∏£‡∏±‡∏°"
                let amountToDeduct = parseFloat(ingredient.amount) * order.quantity; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏á‡πÜ

                console.log(`üîπ ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏î ingredient_id=${ingredient.ingredient_id}, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠=${currentQuantity} g`);

          if (currentQuantity < amountToDeduct) {
            console.error(
              `‚ö†Ô∏è ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏≠ ingredient_id=${ingredient.ingredient_id}, ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£=${amountToDeduct} g, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠=${currentQuantity} g`
            );
            throw new Error(
              `‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏≠: ingredient_id=${ingredient.ingredient_id}`
            );
          }

          console.log(
            `üîπ ‡∏•‡∏î‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö: ingredient_id = ${ingredient.ingredient_id}, ‡∏•‡∏î = ${amountToDeduct} g`
          );

          // ‚úÖ **‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°**
          let newQuantity = (currentQuantity - amountToDeduct) / 1000; // ‡πÅ‡∏õ‡∏•‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô kg

          await connection.query(
            "UPDATE ingredients SET quantity = ? WHERE ingredient_id = ?",
            [newQuantity, ingredient.ingredient_id]
          );

                // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                const [updatedIngredient] = await connection.query(
                    "SELECT quantity FROM ingredients WHERE ingredient_id = ?",
                    [ingredient.ingredient_id]
                );

                console.log(`‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏•‡∏î ingredient_id=${ingredient.ingredient_id}, ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠=${updatedIngredient[0].quantity} g`);
            }
        }

        // ‚úÖ 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
        for (const order of orders) {
            await connection.query(
                "INSERT INTO sales (table_id, menu_id, quantity, total_price, sale_date) VALUES (?, ?, ?, ?, NOW())",
                [table_id, order.menu_id, order.quantity, order.total_price]
            );
        }

        // ‚úÖ 4. ‡∏•‡∏ö‡∏≠‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å `orders`
        await connection.query(
            "DELETE FROM orders WHERE table_id = ? AND payment_status = 'unpaid'",
            [table_id]
        );

        // ‚úÖ 5. ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏õ‡πá‡∏ô `available`
        await connection.query(
            "UPDATE tables SET status = 'available' WHERE table_id = ?",
            [table_id]
        );

        await connection.commit();

        io.emit("order_paid", { table_id });

        res.json({
            success: true,
            message: "‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πá‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÇ‡∏ï‡πä‡∏∞",
        });
    } catch (error) {
        if (connection) await connection.rollback();
        console.error("‚ùå Error confirming payment:", error);
        res.status(500).json({
            success: false,
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            error: error.message,
        });
    } finally {
      if (connection) connection.release();
    }
});

  return router;
};
