const express = require("express"); 
const db = require("../config/db.js"); // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ db ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
const router = express.Router();
const path = require("path");
const multer = require("multer");
const fs = require("fs");



// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
const uploadDir = path.join(__dirname, "../uploads/Userprofile");
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

// üìå ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, "profile_" + Date.now() + path.extname(file.originalname));
    },
});
const upload = multer({ storage });

// üìå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
router.post("/upload-profile/:id", upload.single("profileImage"), async (req, res) => {
    try {
        const userId = req.params.id;
        if (!req.file) {
            return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå" });
        }

        const profileImageUrl = `/uploads/Userprofile/${req.file.filename}`;

        await db.query("UPDATE users SET profile_image = ? WHERE id = ?", [profileImageUrl, userId]);

        res.json({ message: "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", profileImageUrl });
    } catch (error) {
        console.error("‚ùå Error uploading profile image:", error);
        res.status(500).json({ message: "‚ùå ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    }
});

/**
 * üìå 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token)
 * @route GET /api/users/profile/:id
 */
router.get("/profile/:id", async (req, res) => {
    try {
        const userId = req.params.id;
        console.log("üìå API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö user_id:", userId);

        if (isNaN(userId)) {
            return res.status(400).json({ message: "‚ùå Invalid user ID" });
        }

        const connection = await db.getConnection(); // ‚úÖ ‡πÉ‡∏ä‡πâ getConnection()
        const [users] = await connection.query(
            "SELECT id, username, role, address, phone_number, email, profile_image FROM users WHERE id = ?",
            [userId]
        );
        connection.release(); // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏ô connection

        if (!users.length) {
            return res.status(404).json({ message: "‚ùå User not found" });
        }

        res.json(users[0]);
    } catch (error) {
        console.error("‚ùå Error fetching user profile:", error);
        res.status(500).json({ message: "Error fetching user profile", error: error.message });
    }
});

/**
 * üìå 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token)
 * @route PUT /api/users/profile/:id
 */
router.put("/profile/:id", async (req, res) => {
    try {
        const userId = req.params.id;
        const { fullName, phone, address, email, profileImage } = req.body; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° email ‡πÅ‡∏•‡∏∞ profileImage

        const connection = await db.getConnection();
        await connection.query(
            "UPDATE users SET username = ?, phone_number = ?, address = ?, email = ?, profile_image = ? WHERE id = ?",
            [fullName, phone, address, email, profileImage, userId]
        );
        connection.release();

        res.json({ message: "‚úÖ Profile updated successfully" });
    } catch (error) {
        console.error("‚ùå Error updating profile:", error);
        res.status(500).json({ message: "Error updating profile", error });
    }
});

/**
 * üìå 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ Token)
 * @route PUT /api/users/change-password/:id
 */
router.put("/password/:id", async (req, res) => {
    try {
        const userId = req.params.id;
        const { currentPassword, newPassword } = req.body;

        if (!currentPassword || !newPassword) {
            return res.status(400).json({ message: "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const [users] = await db.query("SELECT password FROM users WHERE id = ?", [userId]);

        if (!users.length) {
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }

        const storedPassword = users[0].password;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if (currentPassword !== storedPassword) {
            return res.status(400).json({ message: "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        await db.query("UPDATE users SET password = ? WHERE id = ?", [newPassword, userId]);

        res.json({ message: "‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!" });
    } catch (error) {
        console.error("‚ùå Error updating password:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
    }
});

module.exports = router;
