const express = require("express");
const db = require("../config/db");

module.exports = (io) => {
  const router = express.Router();

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏≤‡∏° ID
  router.get("/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const [tables] = await db.query(
        "SELECT * FROM tables WHERE table_id = ?",
        [id]
      );

      if (tables.length === 0) {
        return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ" });
      }

      res.json(tables[0]); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    } catch (error) {
      console.error("‚ùå Error fetching table by ID:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  router.get("/", async (req, res) => {
    try {
      const { search, status } = req.query;
      let query = "SELECT * FROM tables";
      let params = [];

      if (search || status) {
        query += " WHERE";
        const conditions = [];

        if (search) {
          conditions.push(" table_number LIKE ?");
          params.push(`%${search}%`);
        }

        if (status) {
          conditions.push(" status = ?");
          params.push(status);
        }

        query += conditions.join(" AND");
      }

      const [tables] = await db.query(query, params);
      res.json(tables);
    } catch (error) {
      console.error("‚ùå Error fetching tables:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // ‚úÖ Server-Sent Events (SSE) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  router.get("/updates", (req, res) => {
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");

    const sendUpdate = async () => {
      try {
        const [tables] = await db.query("SELECT * FROM tables");
        res.write(`data: ${JSON.stringify(tables)}\n\n`);
      } catch (error) {
        console.error("‚ùå Error fetching table updates:", error);
      }
    };

    const interval = setInterval(sendUpdate, 5000);
    req.on("close", () => clearInterval(interval));
  });

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÉ‡∏´‡∏°‡πà
  router.post("/", async (req, res) => {
    const { table_number, seats } = req.body;

    // üõ† ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "available"
    const status = "available";

    console.log("üìå ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Frontend:", req.body);

    if (!table_number || !seats) {
      return res
        .status(400)
        .json({ success: false, message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    try {
      await db.query(
        "INSERT INTO tables (table_number, seats, status) VALUES (?, ?, ?)",
        [table_number, seats, status] // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡πÉ‡∏´‡πâ status
      );

      console.log("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      res.json({ success: true, message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      console.error("‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
      res
        .status(500)
        .json({
          success: false,
          message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞",
          error,
        });
    }
  });

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞
  router.put("/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { status, session_id } = req.body;
      await db.query(
        "UPDATE tables SET status = ?, session_id = ? WHERE table_id = ?",
        [status, session_id, id]
      );
      res.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (error) {
      console.error("‚ùå Error updating table:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  // ‚úÖ ‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞
  router.delete("/:id", async (req, res) => {
    try {
      const { id } = req.params;
      await db.query("DELETE FROM tables WHERE table_id = ?", [id]);
      res.json({ message: "‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
    } catch (error) {
      console.error("‚ùå Error deleting table:", error);
      res.status(500).json({ error: "Server error" });
    }
  });

  router.get("/api/tables/search", async (req, res) => {
    const { search, status } = req.query;
    let sql = "SELECT * FROM tables WHERE 1=1";
    const params = [];

    if (search) {
      sql += " AND table_number LIKE ?";
      params.push(`%${search}%`);
    }
    if (status) {
      sql += " AND status = ?";
      params.push(status);
    }

    try {
      const [rows] = await db.query(sql, params);
      res.json(rows);
    } catch (error) {
      console.error("‚ùå Error fetching tables:", error);
      res.status(500).json({ error: "Error fetching tables" });
    }
  });
  router.put("/:id/reset", async (req, res) => {
    try {
      const { id } = req.params;
      await db.query(
        "UPDATE tables SET status = 'available' WHERE table_id = ?",
        [id]
      );
      res.json({ success: true, message: "‡πÇ‡∏ï‡πä‡∏∞‡∏ñ‡∏π‡∏Å‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏õ‡πá‡∏ô available ‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
      console.error("‚ùå Error resetting table:", error);
      res.status(500).json({ error: "Server error" });
    }
  });
  
  router.get("/updates", async (req, res) => {
    try {
      const [tables] = await db.query("SELECT * FROM tables");
      res.json(tables);
    } catch (error) {
      console.error("‚ùå Error fetching table updates:", error);
      res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞" });
    }
  });
  
  return router;
};
