const express = require("express");
const mysql = require("mysql");
const cors = require("cors");
const multer = require("multer");
const path = require("path");
const bodyParser = require("body-parser");

const app = express();
const port = 3002;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

// MySQL Connection
const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database: "maw_db",
});

db.connect((err) => {
  if (err) throw err;
  console.log("Connected to MySQL database.");
});

// Multer Setup for File Uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, "uploads/");
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});

const upload = multer({ storage });

// Routes

// Fetch Products with Pagination, Search, and Sorting
app.get("/api/products", (req, res) => {
  const {
    search = "",
    page = 1,
    limit = 8,
    sort = "product_code",
    order = "ASC",
  } = req.query;

  const offset = (page - 1) * limit;
  const searchQuery = `%${search}%`;

  const totalQuery =
    "SELECT COUNT(*) AS total FROM products WHERE product_name LIKE ?";
  const dataQuery = `
    SELECT * FROM products 
    WHERE product_name LIKE ? 
    ORDER BY ${sort} ${order} 
    LIMIT ? OFFSET ?
  `;

  db.query(totalQuery, [searchQuery], (err, totalResult) => {
    if (err) {
      console.error("Error fetching total:", err);
      return res.status(500).json({ error: "Database Error" });
    }

    db.query(
      dataQuery,
      [searchQuery, parseInt(limit), parseInt(offset)],
      (err, dataResult) => {
        if (err) {
          console.error("Error fetching products:", err);
          return res.status(500).json({ error: "Database Error" });
        }

        res.json({
          total: totalResult[0].total,
          products: dataResult,
        });
      }
    );
  });
});

// Fetch a Single Product by ID
app.get("/api/products/:id", (req, res) => {
  const { id } = req.params;

  db.query("SELECT * FROM products WHERE id = ?", [id], (err, result) => {
    if (err) return res.status(500).json({ error: "Database Error" });
    if (!result.length)
      return res.status(404).json({ error: "Product not found" });

    res.json({ product: result[0] });
  });
});

// Create a New Product
app.post("/api/products", upload.single("image"), (req, res) => {
  const { product_code, product_name, category, price, amount, status } =
    req.body;
  const image_url = req.file ? `/uploads/${req.file.filename}` : null;

  const sql =
    "INSERT INTO products (product_code, product_name, category, price, amount, status, image_url) VALUES (?, ?, ?, ?, ?, ?, ?)";
  const values = [
    product_code,
    product_name,
    category,
    price,
    amount,
    status,
    image_url,
  ];

  db.query(sql, values, (err, result) => {
    if (err) return res.status(500).json({ error: "Database Error" });

    res.json({ message: "Product created successfully" });
  });
});

// Update an Existing Product
app.put("/api/products/:id", upload.single("image"), (req, res) => {
  const { id } = req.params;
  const { product_code, product_name, category, price, amount, status } =
    req.body;
  const image_url = req.file ? `/uploads/${req.file.filename}` : null;

  const sql = `
    UPDATE products 
    SET product_code = ?, product_name = ?, category = ?, price = ?, amount = ?, status = ?, image_url = IFNULL(?, image_url)
    WHERE id = ?
  `;
  const values = [
    product_code,
    product_name,
    category,
    price,
    amount,
    status,
    image_url,
    id,
  ];

  db.query(sql, values, (err, result) => {
    if (err) return res.status(500).json({ error: "Database Error" });

    res.json({ message: "Product updated successfully" });
  });
});

// Delete a Product
app.delete("/api/products/:id", (req, res) => {
  const { id } = req.params;

  const sql = "DELETE FROM products WHERE id = ?";
  db.query(sql, [id], (err, result) => {
    if (err) return res.status(500).json({ error: "Database Error" });

    res.json({ message: "Product deleted successfully" });
  });
});

// Login Endpoint
app.post("/api/login", (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).send({ message: "กรุณากรอกข้อมูลให้ครบถ้วน" });
  }

  const sqlQuery = "SELECT * FROM users WHERE username = ? AND password = ?";
  db.query(sqlQuery, [username, password], (err, result) => {
    if (err) return res.status(500).send({ message: "Database error" });

    if (result.length > 0) {
      return res.status(200).send({
        message: "เข้าสู่ระบบสำเร็จ",
        user: { id: result[0].id, username: result[0].username },
      });
    } else {
      return res
        .status(401)
        .send({ message: "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง" });
    }
  });
});

// Fetch all tables
app.get("/api/tables", (req, res) => {
  const query = "SELECT * FROM tables";

  db.query(query, (err, result) => {
    if (err) {
      console.error("Error fetching tables:", err);
      return res.status(500).json({ error: "Database Error" });
    }
    res.json({ tables: result });
  });
});

// Add a new table
app.post("/api/tables", (req, res) => {
  const { table_number, capacity, status } = req.body;

  const query = `
    INSERT INTO tables (table_number, capacity, status) 
    VALUES (?, ?, ?)
  `;
  const values = [table_number, capacity, status];

  db.query(query, values, (err, result) => {
    if (err) {
      console.error("Error adding table:", err);
      return res.status(500).json({ error: "Database Error" });
    }
    res.json({ message: "Table added successfully", tableId: result.insertId });
  });
});

// Update table status (e.g., for checkout)
app.put("/api/tables/:id", (req, res) => {
  const { id } = req.params;
  const { status, customer_count } = req.body;

  const query = `
    UPDATE tables 
    SET status = ?, customer_count = ?
    WHERE id = ?
  `;
  const values = [status, customer_count, id];

  db.query(query, values, (err, result) => {
    if (err) {
      console.error("Error updating table status:", err);
      return res.status(500).json({ error: "Database Error" });
    }
    res.json({ message: "Table status updated successfully" });
  });
});

// Delete a table
app.delete("/api/tables/:id", (req, res) => {
  const { id } = req.params;

  const query = "DELETE FROM tables WHERE id = ?";

  db.query(query, [id], (err, result) => {
    if (err) {
      console.error("Error deleting table:", err);
      return res.status(500).json({ error: "Database Error" });
    }
    res.json({ message: "Table deleted successfully" });
  });
});

// Fetch Paginated Ingredients
app.get("/api/ingredients", (req, res) => {
  const { page = 1, limit = 10 } = req.query;

  const offset = (page - 1) * limit;

  const totalQuery = "SELECT COUNT(*) AS total FROM ingredients";
  const dataQuery = `
    SELECT id, name, type, quantity
    FROM ingredients 
    LIMIT ? OFFSET ?
  `;

  db.query(totalQuery, (err, totalResult) => {
    if (err) {
      console.error("Error fetching total ingredients count:", err);
      return res.status(500).json({ error: "Database Error" });
    }

    const total = totalResult[0].total;

    db.query(
      dataQuery,
      [parseInt(limit), parseInt(offset)],
      (err, dataResult) => {
        if (err) {
          console.error("Error fetching ingredients:", err);
          return res.status(500).json({ error: "Database Error" });
        }

        res.json({
          total,
          ingredients: dataResult,
        });
      }
    );
  });
});

app.get("/api/ingredients", (req, res) => {
  const { page = 1, limit = 10, search = "", type = "" } = req.query;

  const offset = (page - 1) * limit;
  const searchQuery = `%${search}%`;

  let totalQuery =
    "SELECT COUNT(*) AS total FROM ingredients WHERE name LIKE ?";
  let dataQuery = `
    SELECT id, name, type, total_quantity 
    FROM ingredients 
    WHERE name LIKE ?
  `;

  if (type) {
    totalQuery += " AND type = ?";
    dataQuery += " AND type = ?";
  }

  dataQuery += " LIMIT ? OFFSET ?";

  const queryParams = type ? [searchQuery, type] : [searchQuery];

  db.query(totalQuery, queryParams, (err, totalResult) => {
    if (err) {
      console.error("Error fetching total ingredients count:", err);
      return res.status(500).json({ error: "Database Error" });
    }

    const total = totalResult[0].total;

    db.query(
      dataQuery,
      [...queryParams, parseInt(limit), parseInt(offset)],
      (err, dataResult) => {
        if (err) {
          console.error("Error fetching ingredients:", err);
          return res.status(500).json({ error: "Database Error" });
        }

        res.json({
          total,
          ingredients: dataResult,
        });
      }
    );
  });
});

// Fetch all recipes (products) with ingredients
app.get("/api/recipes", (req, res) => {
  const recipesQuery = `
    SELECT p.id AS product_id, p.product_name AS name, p.image_url, 
           i.name AS ingredient_name, i.type AS ingredient_type, i.quantity AS ingredient_quantity
    FROM products p
    LEFT JOIN ingredients i ON p.id = i.product_id
  `;

  db.query(recipesQuery, (err, results) => {
    if (err) {
      console.error("Error fetching recipes:", err);
      return res.status(500).json({ error: "Database Error" });
    }

    // Group results by product_id
    const recipes = results.reduce((acc, row) => {
      const {
        product_id,
        name,
        image_url,
        ingredient_name,
        ingredient_type,
        ingredient_quantity,
      } = row;

      let recipe = acc.find((r) => r.id === product_id);
      if (!recipe) {
        recipe = { id: product_id, name, image: image_url, ingredients: [] };
        acc.push(recipe);
      }

      if (ingredient_name) {
        recipe.ingredients.push({
          name: ingredient_name,
          type: ingredient_type,
          quantity: ingredient_quantity,
        });
      }

      return acc;
    }, []);

    res.json(recipes);
  });
});

// Fetch Sales Summary
app.get("/api/sales/summary", (req, res) => {
  try {
    res.json({
      total_sales: 60788,
      total_customers: 3314,
      total_orders: 2125,
      average_sales_per_order: 3250,
    });
  } catch (error) {
    console.error("Error fetching sales summary:", error);
    res.status(500).json({ error: "Unable to fetch sales summary" });
  }
});

// Fetch Sales Data for Pie Chart
app.get("/api/sales/pie", (req, res) => {
  try {
    const pieData = [
      { name: "Online", value: 4459 },
      { name: "Offline", value: 5541 },
    ];
    res.json(pieData);
  } catch (error) {
    console.error("Error fetching pie chart data:", error);
    res.status(500).json({ error: "Unable to fetch pie chart data" });
  }
});

// Fetch Sales Data for Line Chart
app.get("/api/sales/line", (req, res) => {
  try {
    const lineData = [
      { name: "ม.ค. 65", Online: 5542000, Offline: 3282000 },
      { name: "ก.พ. 65", Online: 6523000, Offline: 4521000 },
      { name: "มี.ค. 65", Online: 4123000, Offline: 3000000 },
    ];
    res.json(lineData);
  } catch (error) {
    console.error("Error fetching line chart data:", error);
    res.status(500).json({ error: "Unable to fetch line chart data" });
  }
});

// Fetch Sales Data for Bar Chart
app.get("/api/sales/bar", (req, res) => {
  try {
    const barData = [
      { name: "Online", value: 4459 },
      { name: "Offline", value: 5541 },
    ];
    res.json(barData);
  } catch (error) {
    console.error("Error fetching bar chart data:", error);
    res.status(500).json({ error: "Unable to fetch bar chart data" });
  }
});

// Fetch Top Products
app.get("/api/products/top", (req, res) => {
  const topProductsQuery = `
    SELECT product_name AS name, SUM(amount) AS quantity_sold, SUM(price * amount) AS total_sales
    FROM products
    GROUP BY id
    ORDER BY total_sales DESC
    LIMIT 5
  `;

  db.query(topProductsQuery, (err, results) => {
    if (err) {
      console.error("Error fetching top products:", err);
      return res.status(500).json({ error: "Database Error" });
    }

    if (results.length === 0) {
      return res.status(404).json({ error: "No products found" }); // ตรวจสอบเงื่อนไขนี้
    }

    res.json(results);
  });
});

app.get('/api/tables/:id', async (req, res) => {
  const { id } = req.params;
  console.log(`Fetching table with ID: ${id}`);
  const table = await db.query('SELECT * FROM tables WHERE id = ?', [id]);
  console.log(table);
  if (table.length === 0) {
      return res.status(404).send('Table not found');
  }
  res.json(table[0]);
});


// Start the Server
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
